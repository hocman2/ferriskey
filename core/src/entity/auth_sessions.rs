//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "auth_sessions"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: Uuid,
    pub realm_id: Uuid,
    pub client_id: Uuid,
    pub redirect_uri: String,
    pub response_type: String,
    pub scope: String,
    pub state: Option<String>,
    pub nonce: Option<String>,
    pub user_id: Option<Uuid>,
    pub code: Option<String>,
    pub authenticated: bool,
    pub created_at: DateTime,
    pub expires_at: DateTime,
    pub webauthn_challenge: Option<Vec<u8>>,
    pub webauthn_challenge_issued_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    RealmId,
    ClientId,
    RedirectUri,
    ResponseType,
    Scope,
    State,
    Nonce,
    UserId,
    Code,
    Authenticated,
    CreatedAt,
    ExpiresAt,
    WebauthnChallenge,
    WebauthnChallengeIssuedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Clients,
    Realms,
    Users,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::RealmId => ColumnType::Uuid.def(),
            Self::ClientId => ColumnType::Uuid.def(),
            Self::RedirectUri => ColumnType::String(StringLen::N(255u32)).def(),
            Self::ResponseType => ColumnType::String(StringLen::N(255u32)).def(),
            Self::Scope => ColumnType::String(StringLen::N(255u32)).def(),
            Self::State => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::Nonce => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::UserId => ColumnType::Uuid.def().null(),
            Self::Code => ColumnType::String(StringLen::N(255u32))
                .def()
                .null()
                .unique(),
            Self::Authenticated => ColumnType::Boolean.def(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::ExpiresAt => ColumnType::DateTime.def(),
            Self::WebauthnChallenge => ColumnType::Binary(32u32).def().null(),
            Self::WebauthnChallengeIssuedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Clients => Entity::belongs_to(super::clients::Entity)
                .from(Column::ClientId)
                .to(super::clients::Column::Id)
                .into(),
            Self::Realms => Entity::belongs_to(super::realms::Entity)
                .from(Column::RealmId)
                .to(super::realms::Column::Id)
                .into(),
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from((Column::UserId, Column::UserId))
                .to((super::users::Column::Id, super::users::Column::Id))
                .into(),
        }
    }
}

impl Related<super::clients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clients.def()
    }
}

impl Related<super::realms::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Realms.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
