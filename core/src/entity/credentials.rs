//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "credentials"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: Uuid,
    pub salt: Option<String>,
    pub credential_type: String,
    pub user_id: Uuid,
    pub user_label: Option<String>,
    pub secret_data: String,
    pub credential_data: Json,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub temporary: Option<bool>,
    pub webauthn_credential_id: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Salt,
    CredentialType,
    UserId,
    UserLabel,
    SecretData,
    CredentialData,
    CreatedAt,
    UpdatedAt,
    Temporary,
    WebauthnCredentialId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Users,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::Salt => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::CredentialType => ColumnType::String(StringLen::N(255u32)).def(),
            Self::UserId => ColumnType::Uuid.def(),
            Self::UserLabel => ColumnType::String(StringLen::N(255u32)).def().null(),
            Self::SecretData => ColumnType::Text.def(),
            Self::CredentialData => ColumnType::JsonBinary.def(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
            Self::Temporary => ColumnType::Boolean.def().null(),
            Self::WebauthnCredentialId => ColumnType::Binary(256u32).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from(Column::UserId)
                .to(super::users::Column::Id)
                .into(),
        }
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
